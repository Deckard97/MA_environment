[global_tags]

[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

# OUTPUT PLUGINS
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "3gH3gJHl6d2QhwkRpPslL2g8UHt7H3kNj3KlN2jN2K"
  organization = "testenv"
  bucket = "metricdb"

# INPUT PLUGINS
# MySQL/MariaDB
[[inputs.mysql]]
  servers = ["root:root@tcp(db:3306)/"]

# Apache (if applicable)
[[inputs.apache]]
  urls = ["http://httpd/server-status?auto"]

# Docker
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  timeout = "5s"

# Spring Boot Actuator Prometheus Metrics
[[inputs.prometheus]]
  urls = [
    "http://app1:8080/actuator/prometheus",
    "http://app2:8080/actuator/prometheus",
  ]
  metric_version = 2
  interval = "10s"
  response_timeout = "5s"

# [global_tags]

# [agent]
#   interval = "10s"
#   round_interval = true
#   metric_batch_size = 1000
#   metric_buffer_limit = 10000
#   collection_jitter = "0s"
#   flush_interval = "10s"
#   flush_jitter = "0s"
#   precision = ""
#   hostname = ""
#   omit_hostname = false

# ###############################################################################
# # OUTPUT PLUGINS
# ###############################################################################

# [[outputs.influxdb_v2]]
#   urls = ["http://influxdb:8086"]
#   token = "3gH3gJHl6d2QhwkRpPslL2g8UHt7H3kNj3KlN2jN2K"
#   organization = "testenv"
#   bucket = "metricdb"

# ###############################################################################
# # INPUT PLUGINS
# ###############################################################################

# # MySQL/MariaDB
# [[inputs.mysql]]
#   servers = ["root:root@tcp(db:3306)/"]
#   # Queries to collect
#   gather_table_schema = false
#   gather_process_list = true
#   gather_info_schema_auto_inc = true
#   gather_slave_status = true
#   gather_binary_logs = false
#   gather_table_io_waits = true
#   gather_table_lock_waits = true
#   gather_index_io_waits = true
#   gather_event_waits = true
#   gather_file_events_stats = true
#   gather_perf_events_statements = true
#   interval_slow = "1m"

# # Apache
# [[inputs.apache]]
#   urls = ["http://httpd/server-status?auto"]

# # Docker
# [[inputs.docker]]
#   endpoint = "unix:///var/run/docker.sock"
#   gather_services = false
#   source_tag = false
#   container_name_include = []
#   container_name_exclude = []
#   timeout = "5s"
#   perdevice_include = []

# # Java Applications
# [[inputs.httpjson]]
#   name = "spring_boot_app"
#   servers = [
#     "http://app1:8080/actuator/metrics",
#     "http://app2:8080/actuator/metrics",
#   ]
#   method = "GET"

# # telegraf.conf
# [[inputs.prometheus]]
#   ## An array of urls to scrape metrics from.
#   urls = [
#     "http://app1:8080/actuator/prometheus",
#     "http://app2:8080/actuator/prometheus",
#   ]
  
#   ## Metric version controls the mapping from Prometheus metrics into Telegraf metrics.
#   metric_version = 2

#   ## Interval at which to scrape metrics. Default is 15s.
#   interval = "10s"

#   ## Timeout for scraping metrics from the Prometheus endpoint.
#   response_timeout = "5s"


# [[inputs.jolokia2_agent]]
#   # List of agents to poll
#   urls = ["http://application1:8778/jolokia", "http://application2:8778/jolokia"]
#   name_prefix = "jolokia_agent_"
#   # List of metrics to collect from each agent.
#   # Memory Usage
#   [[inputs.jolokia2_agent.metric]]
#     name     = "jvm_memory"
#     mbean    = "java.lang:type=Memory"
#     paths    = ["HeapMemoryUsage", "NonHeapMemoryUsage"]

#   # Garbage Collection
#   [[inputs.jolokia2_agent.metric]]
#     name     = "jvm_gc"
#     mbean    = "java.lang:type=GarbageCollector,name=*"
#     paths    = ["CollectionCount", "CollectionTime"]

#   # Threading Metrics
#   [[inputs.jolokia2_agent.metric]]
#     name     = "jvm_threads"
#     mbean    = "java.lang:type=Threading"
#     paths    = ["ThreadCount", "PeakThreadCount", "DaemonThreadCount", "DeadlockedThreads"]

#   # Class Loading
#   [[inputs.jolokia2_agent.metric]]
#     name     = "jvm_classloading"
#     mbean    = "java.lang:type=ClassLoading"
#     paths    = ["LoadedClassCount", "UnloadedClassCount"]

#   # Runtime Information
#   [[inputs.jolokia2_agent.metric]]
#     name     = "jvm_runtime"
#     mbean    = "java.lang:type=Runtime"
#     paths    = ["Uptime", "StartTime", "JvmName"]

#   # Operating System Metrics
#   [[inputs.jolokia2_agent.metric]]
#     name     = "jvm_os"
#     mbean    = "java.lang:type=OperatingSystem"
#     paths    = ["SystemLoadAverage", "AvailableProcessors"]

#   # Tomcat (Catalina) Metrics for Embedded Tomcat in Spring Boot

#   # Request Processor Metrics
#   [[inputs.jolokia2_agent.metric]]
#     name     = "tomcat_request_processor"
#     mbean    = "Catalina:name=\"http-nio-8080\",type=GlobalRequestProcessor"
#     paths    = ["requestCount", "errorCount", "processingTime", "maxTime"]

#   # Thread Pool Metrics
#   [[inputs.jolokia2_agent.metric]]
#     name     = "tomcat_thread_pool"
#     mbean    = "Catalina:name=\"http-nio-8080\",type=ThreadPool"
#     paths    = ["currentThreadCount", "currentThreadsBusy"]

#   # Session Metrics
#   [[inputs.jolokia2_agent.metric]]
#     name     = "tomcat_sessions"
#     mbean    = "Catalina:type=Manager,context=*,host=localhost"
#     paths    = ["activeSessions", "expiredSessions", "sessionCounter"]



